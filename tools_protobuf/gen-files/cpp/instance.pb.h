// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instance.proto

#ifndef PROTOBUF_instance_2eproto__INCLUDED
#define PROTOBUF_instance_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_instance_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsLabelImpl();
void InitDefaultsLabel();
void InitDefaultsFeatureImpl();
void InitDefaultsFeature();
void InitDefaultsDenseFeatureImpl();
void InitDefaultsDenseFeature();
void InitDefaultsFeaturesImpl();
void InitDefaultsFeatures();
void InitDefaultsInstanceImpl();
void InitDefaultsInstance();
void InitDefaultsInstances_MetaInfoEntry_DoNotUseImpl();
void InitDefaultsInstances_MetaInfoEntry_DoNotUse();
void InitDefaultsInstancesImpl();
void InitDefaultsInstances();
inline void InitDefaults() {
  InitDefaultsLabel();
  InitDefaultsFeature();
  InitDefaultsDenseFeature();
  InitDefaultsFeatures();
  InitDefaultsInstance();
  InitDefaultsInstances_MetaInfoEntry_DoNotUse();
  InitDefaultsInstances();
}
}  // namespace protobuf_instance_2eproto
namespace openmit {
namespace pb {
class DenseFeature;
class DenseFeatureDefaultTypeInternal;
extern DenseFeatureDefaultTypeInternal _DenseFeature_default_instance_;
class Feature;
class FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class Features;
class FeaturesDefaultTypeInternal;
extern FeaturesDefaultTypeInternal _Features_default_instance_;
class Instance;
class InstanceDefaultTypeInternal;
extern InstanceDefaultTypeInternal _Instance_default_instance_;
class Instances;
class InstancesDefaultTypeInternal;
extern InstancesDefaultTypeInternal _Instances_default_instance_;
class Instances_MetaInfoEntry_DoNotUse;
class Instances_MetaInfoEntry_DoNotUseDefaultTypeInternal;
extern Instances_MetaInfoEntry_DoNotUseDefaultTypeInternal _Instances_MetaInfoEntry_DoNotUse_default_instance_;
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
}  // namespace pb
}  // namespace openmit
namespace openmit {
namespace pb {

// ===================================================================

class Label : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmit.pb.Label) */ {
 public:
  Label();
  virtual ~Label();

  Label(const Label& from);

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(Label&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Label& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Label* other);
  void Swap(Label* other);
  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const PROTOBUF_FINAL { return New(NULL); }

  Label* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Label* other);
  protected:
  explicit Label(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float label = 1;
  int label_size() const;
  void clear_label();
  static const int kLabelFieldNumber = 1;
  float label(int index) const;
  void set_label(int index, float value);
  void add_label(float value);
  const ::google::protobuf::RepeatedField< float >&
      label() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_label();

  // @@protoc_insertion_point(class_scope:openmit.pb.Label)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< float > label_;
  mutable int _label_cached_byte_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_instance_2eproto::TableStruct;
  friend void ::protobuf_instance_2eproto::InitDefaultsLabelImpl();
};
// -------------------------------------------------------------------

class Feature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmit.pb.Feature) */ {
 public:
  Feature();
  virtual ~Feature();

  Feature(const Feature& from);

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(Feature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Feature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Feature* other);
  void Swap(Feature* other);
  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Feature* New() const PROTOBUF_FINAL { return New(NULL); }

  Feature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Feature* other);
  protected:
  explicit Feature(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_type();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      ::std::string* type);

  // uint64 tag = 1;
  void clear_tag();
  static const int kTagFieldNumber = 1;
  ::google::protobuf::uint64 tag() const;
  void set_tag(::google::protobuf::uint64 value);

  // uint64 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::uint64 id() const;
  void set_id(::google::protobuf::uint64 value);

  // float val = 3;
  void clear_val();
  static const int kValFieldNumber = 3;
  float val() const;
  void set_val(float value);

  // float weight = 4;
  void clear_weight();
  static const int kWeightFieldNumber = 4;
  float weight() const;
  void set_weight(float value);

  // @@protoc_insertion_point(class_scope:openmit.pb.Feature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::uint64 tag_;
  ::google::protobuf::uint64 id_;
  float val_;
  float weight_;
  mutable int _cached_size_;
  friend struct ::protobuf_instance_2eproto::TableStruct;
  friend void ::protobuf_instance_2eproto::InitDefaultsFeatureImpl();
};
// -------------------------------------------------------------------

class DenseFeature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmit.pb.DenseFeature) */ {
 public:
  DenseFeature();
  virtual ~DenseFeature();

  DenseFeature(const DenseFeature& from);

  inline DenseFeature& operator=(const DenseFeature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DenseFeature(DenseFeature&& from) noexcept
    : DenseFeature() {
    *this = ::std::move(from);
  }

  inline DenseFeature& operator=(DenseFeature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseFeature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DenseFeature* internal_default_instance() {
    return reinterpret_cast<const DenseFeature*>(
               &_DenseFeature_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(DenseFeature* other);
  void Swap(DenseFeature* other);
  friend void swap(DenseFeature& a, DenseFeature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DenseFeature* New() const PROTOBUF_FINAL { return New(NULL); }

  DenseFeature* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DenseFeature& from);
  void MergeFrom(const DenseFeature& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DenseFeature* other);
  protected:
  explicit DenseFeature(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float values = 2;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 2;
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::google::protobuf::RepeatedField< float >&
      values() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_values();

  // string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_type();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      ::std::string* type);

  // @@protoc_insertion_point(class_scope:openmit.pb.DenseFeature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedField< float > values_;
  mutable int _values_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable int _cached_size_;
  friend struct ::protobuf_instance_2eproto::TableStruct;
  friend void ::protobuf_instance_2eproto::InitDefaultsDenseFeatureImpl();
};
// -------------------------------------------------------------------

class Features : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmit.pb.Features) */ {
 public:
  Features();
  virtual ~Features();

  Features(const Features& from);

  inline Features& operator=(const Features& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Features(Features&& from) noexcept
    : Features() {
    *this = ::std::move(from);
  }

  inline Features& operator=(Features&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Features& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Features* internal_default_instance() {
    return reinterpret_cast<const Features*>(
               &_Features_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(Features* other);
  void Swap(Features* other);
  friend void swap(Features& a, Features& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Features* New() const PROTOBUF_FINAL { return New(NULL); }

  Features* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Features& from);
  void MergeFrom(const Features& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Features* other);
  protected:
  explicit Features(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmit.pb.Feature feature = 1;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 1;
  const ::openmit::pb::Feature& feature(int index) const;
  ::openmit::pb::Feature* mutable_feature(int index);
  ::openmit::pb::Feature* add_feature();
  ::google::protobuf::RepeatedPtrField< ::openmit::pb::Feature >*
      mutable_feature();
  const ::google::protobuf::RepeatedPtrField< ::openmit::pb::Feature >&
      feature() const;

  // repeated .openmit.pb.DenseFeature dense = 2;
  int dense_size() const;
  void clear_dense();
  static const int kDenseFieldNumber = 2;
  const ::openmit::pb::DenseFeature& dense(int index) const;
  ::openmit::pb::DenseFeature* mutable_dense(int index);
  ::openmit::pb::DenseFeature* add_dense();
  ::google::protobuf::RepeatedPtrField< ::openmit::pb::DenseFeature >*
      mutable_dense();
  const ::google::protobuf::RepeatedPtrField< ::openmit::pb::DenseFeature >&
      dense() const;

  // @@protoc_insertion_point(class_scope:openmit.pb.Features)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::openmit::pb::Feature > feature_;
  ::google::protobuf::RepeatedPtrField< ::openmit::pb::DenseFeature > dense_;
  mutable int _cached_size_;
  friend struct ::protobuf_instance_2eproto::TableStruct;
  friend void ::protobuf_instance_2eproto::InitDefaultsFeaturesImpl();
};
// -------------------------------------------------------------------

class Instance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmit.pb.Instance) */ {
 public:
  Instance();
  virtual ~Instance();

  Instance(const Instance& from);

  inline Instance& operator=(const Instance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Instance(Instance&& from) noexcept
    : Instance() {
    *this = ::std::move(from);
  }

  inline Instance& operator=(Instance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Instance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Instance* internal_default_instance() {
    return reinterpret_cast<const Instance*>(
               &_Instance_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(Instance* other);
  void Swap(Instance* other);
  friend void swap(Instance& a, Instance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Instance* New() const PROTOBUF_FINAL { return New(NULL); }

  Instance* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Instance& from);
  void MergeFrom(const Instance& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Instance* other);
  protected:
  explicit Instance(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .openmit.pb.Label label = 3;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 3;
  private:
  void _slow_mutable_label();
  public:
  const ::openmit::pb::Label& label() const;
  ::openmit::pb::Label* release_label();
  ::openmit::pb::Label* mutable_label();
  void set_allocated_label(::openmit::pb::Label* label);
  void unsafe_arena_set_allocated_label(
      ::openmit::pb::Label* label);
  ::openmit::pb::Label* unsafe_arena_release_label();

  // .openmit.pb.Features features = 4;
  bool has_features() const;
  void clear_features();
  static const int kFeaturesFieldNumber = 4;
  private:
  void _slow_mutable_features();
  public:
  const ::openmit::pb::Features& features() const;
  ::openmit::pb::Features* release_features();
  ::openmit::pb::Features* mutable_features();
  void set_allocated_features(::openmit::pb::Features* features);
  void unsafe_arena_set_allocated_features(
      ::openmit::pb::Features* features);
  ::openmit::pb::Features* unsafe_arena_release_features();

  // uint64 inst_id = 1;
  void clear_inst_id();
  static const int kInstIdFieldNumber = 1;
  ::google::protobuf::uint64 inst_id() const;
  void set_inst_id(::google::protobuf::uint64 value);

  // float inst_weight = 2;
  void clear_inst_weight();
  static const int kInstWeightFieldNumber = 2;
  float inst_weight() const;
  void set_inst_weight(float value);

  // uint32 seq_id = 5;
  void clear_seq_id();
  static const int kSeqIdFieldNumber = 5;
  ::google::protobuf::uint32 seq_id() const;
  void set_seq_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmit.pb.Instance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::openmit::pb::Label* label_;
  ::openmit::pb::Features* features_;
  ::google::protobuf::uint64 inst_id_;
  float inst_weight_;
  ::google::protobuf::uint32 seq_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_instance_2eproto::TableStruct;
  friend void ::protobuf_instance_2eproto::InitDefaultsInstanceImpl();
};
// -------------------------------------------------------------------

class Instances_MetaInfoEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Instances_MetaInfoEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Instances_MetaInfoEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Instances_MetaInfoEntry_DoNotUse();
  Instances_MetaInfoEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Instances_MetaInfoEntry_DoNotUse& other);
  static const Instances_MetaInfoEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Instances_MetaInfoEntry_DoNotUse*>(&_Instances_MetaInfoEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Instances : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmit.pb.Instances) */ {
 public:
  Instances();
  virtual ~Instances();

  Instances(const Instances& from);

  inline Instances& operator=(const Instances& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Instances(Instances&& from) noexcept
    : Instances() {
    *this = ::std::move(from);
  }

  inline Instances& operator=(Instances&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Instances& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Instances* internal_default_instance() {
    return reinterpret_cast<const Instances*>(
               &_Instances_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(Instances* other);
  void Swap(Instances* other);
  friend void swap(Instances& a, Instances& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Instances* New() const PROTOBUF_FINAL { return New(NULL); }

  Instances* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Instances& from);
  void MergeFrom(const Instances& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Instances* other);
  protected:
  explicit Instances(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .openmit.pb.Instance instances = 1;
  int instances_size() const;
  void clear_instances();
  static const int kInstancesFieldNumber = 1;
  const ::openmit::pb::Instance& instances(int index) const;
  ::openmit::pb::Instance* mutable_instances(int index);
  ::openmit::pb::Instance* add_instances();
  ::google::protobuf::RepeatedPtrField< ::openmit::pb::Instance >*
      mutable_instances();
  const ::google::protobuf::RepeatedPtrField< ::openmit::pb::Instance >&
      instances() const;

  // map<string, string> meta_info = 3;
  int meta_info_size() const;
  void clear_meta_info();
  static const int kMetaInfoFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      meta_info() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_meta_info();

  // uint64 logid = 2;
  void clear_logid();
  static const int kLogidFieldNumber = 2;
  ::google::protobuf::uint64 logid() const;
  void set_logid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openmit.pb.Instances)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::openmit::pb::Instance > instances_;
  ::google::protobuf::internal::MapField<
      Instances_MetaInfoEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > meta_info_;
  ::google::protobuf::uint64 logid_;
  mutable int _cached_size_;
  friend struct ::protobuf_instance_2eproto::TableStruct;
  friend void ::protobuf_instance_2eproto::InitDefaultsInstancesImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Label

// repeated float label = 1;
inline int Label::label_size() const {
  return label_.size();
}
inline void Label::clear_label() {
  label_.Clear();
}
inline float Label::label(int index) const {
  // @@protoc_insertion_point(field_get:openmit.pb.Label.label)
  return label_.Get(index);
}
inline void Label::set_label(int index, float value) {
  label_.Set(index, value);
  // @@protoc_insertion_point(field_set:openmit.pb.Label.label)
}
inline void Label::add_label(float value) {
  label_.Add(value);
  // @@protoc_insertion_point(field_add:openmit.pb.Label.label)
}
inline const ::google::protobuf::RepeatedField< float >&
Label::label() const {
  // @@protoc_insertion_point(field_list:openmit.pb.Label.label)
  return label_;
}
inline ::google::protobuf::RepeatedField< float >*
Label::mutable_label() {
  // @@protoc_insertion_point(field_mutable_list:openmit.pb.Label.label)
  return &label_;
}

// -------------------------------------------------------------------

// Feature

// uint64 tag = 1;
inline void Feature::clear_tag() {
  tag_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Feature::tag() const {
  // @@protoc_insertion_point(field_get:openmit.pb.Feature.tag)
  return tag_;
}
inline void Feature::set_tag(::google::protobuf::uint64 value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:openmit.pb.Feature.tag)
}

// uint64 id = 2;
inline void Feature::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Feature::id() const {
  // @@protoc_insertion_point(field_get:openmit.pb.Feature.id)
  return id_;
}
inline void Feature::set_id(::google::protobuf::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:openmit.pb.Feature.id)
}

// float val = 3;
inline void Feature::clear_val() {
  val_ = 0;
}
inline float Feature::val() const {
  // @@protoc_insertion_point(field_get:openmit.pb.Feature.val)
  return val_;
}
inline void Feature::set_val(float value) {
  
  val_ = value;
  // @@protoc_insertion_point(field_set:openmit.pb.Feature.val)
}

// float weight = 4;
inline void Feature::clear_weight() {
  weight_ = 0;
}
inline float Feature::weight() const {
  // @@protoc_insertion_point(field_get:openmit.pb.Feature.weight)
  return weight_;
}
inline void Feature::set_weight(float value) {
  
  weight_ = value;
  // @@protoc_insertion_point(field_set:openmit.pb.Feature.weight)
}

// string type = 5;
inline void Feature::clear_type() {
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Feature::type() const {
  // @@protoc_insertion_point(field_get:openmit.pb.Feature.type)
  return type_.Get();
}
inline void Feature::set_type(const ::std::string& value) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:openmit.pb.Feature.type)
}
#if LANG_CXX11
inline void Feature::set_type(::std::string&& value) {
  
  type_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:openmit.pb.Feature.type)
}
#endif
inline void Feature::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:openmit.pb.Feature.type)
}
inline void Feature::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:openmit.pb.Feature.type)
}
inline ::std::string* Feature::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:openmit.pb.Feature.type)
  return type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Feature::release_type() {
  // @@protoc_insertion_point(field_release:openmit.pb.Feature.type)
  
  return type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Feature::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:openmit.pb.Feature.type)
}
inline ::std::string* Feature::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:openmit.pb.Feature.type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Feature::unsafe_arena_set_allocated_type(
    ::std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type != NULL) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openmit.pb.Feature.type)
}

// -------------------------------------------------------------------

// DenseFeature

// string type = 1;
inline void DenseFeature::clear_type() {
  type_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DenseFeature::type() const {
  // @@protoc_insertion_point(field_get:openmit.pb.DenseFeature.type)
  return type_.Get();
}
inline void DenseFeature::set_type(const ::std::string& value) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:openmit.pb.DenseFeature.type)
}
#if LANG_CXX11
inline void DenseFeature::set_type(::std::string&& value) {
  
  type_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:openmit.pb.DenseFeature.type)
}
#endif
inline void DenseFeature::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:openmit.pb.DenseFeature.type)
}
inline void DenseFeature::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:openmit.pb.DenseFeature.type)
}
inline ::std::string* DenseFeature::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:openmit.pb.DenseFeature.type)
  return type_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DenseFeature::release_type() {
  // @@protoc_insertion_point(field_release:openmit.pb.DenseFeature.type)
  
  return type_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DenseFeature::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:openmit.pb.DenseFeature.type)
}
inline ::std::string* DenseFeature::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:openmit.pb.DenseFeature.type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return type_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DenseFeature::unsafe_arena_set_allocated_type(
    ::std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (type != NULL) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:openmit.pb.DenseFeature.type)
}

// repeated float values = 2;
inline int DenseFeature::values_size() const {
  return values_.size();
}
inline void DenseFeature::clear_values() {
  values_.Clear();
}
inline float DenseFeature::values(int index) const {
  // @@protoc_insertion_point(field_get:openmit.pb.DenseFeature.values)
  return values_.Get(index);
}
inline void DenseFeature::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:openmit.pb.DenseFeature.values)
}
inline void DenseFeature::add_values(float value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:openmit.pb.DenseFeature.values)
}
inline const ::google::protobuf::RepeatedField< float >&
DenseFeature::values() const {
  // @@protoc_insertion_point(field_list:openmit.pb.DenseFeature.values)
  return values_;
}
inline ::google::protobuf::RepeatedField< float >*
DenseFeature::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:openmit.pb.DenseFeature.values)
  return &values_;
}

// -------------------------------------------------------------------

// Features

// repeated .openmit.pb.Feature feature = 1;
inline int Features::feature_size() const {
  return feature_.size();
}
inline void Features::clear_feature() {
  feature_.Clear();
}
inline const ::openmit::pb::Feature& Features::feature(int index) const {
  // @@protoc_insertion_point(field_get:openmit.pb.Features.feature)
  return feature_.Get(index);
}
inline ::openmit::pb::Feature* Features::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:openmit.pb.Features.feature)
  return feature_.Mutable(index);
}
inline ::openmit::pb::Feature* Features::add_feature() {
  // @@protoc_insertion_point(field_add:openmit.pb.Features.feature)
  return feature_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openmit::pb::Feature >*
Features::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:openmit.pb.Features.feature)
  return &feature_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openmit::pb::Feature >&
Features::feature() const {
  // @@protoc_insertion_point(field_list:openmit.pb.Features.feature)
  return feature_;
}

// repeated .openmit.pb.DenseFeature dense = 2;
inline int Features::dense_size() const {
  return dense_.size();
}
inline void Features::clear_dense() {
  dense_.Clear();
}
inline const ::openmit::pb::DenseFeature& Features::dense(int index) const {
  // @@protoc_insertion_point(field_get:openmit.pb.Features.dense)
  return dense_.Get(index);
}
inline ::openmit::pb::DenseFeature* Features::mutable_dense(int index) {
  // @@protoc_insertion_point(field_mutable:openmit.pb.Features.dense)
  return dense_.Mutable(index);
}
inline ::openmit::pb::DenseFeature* Features::add_dense() {
  // @@protoc_insertion_point(field_add:openmit.pb.Features.dense)
  return dense_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openmit::pb::DenseFeature >*
Features::mutable_dense() {
  // @@protoc_insertion_point(field_mutable_list:openmit.pb.Features.dense)
  return &dense_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openmit::pb::DenseFeature >&
Features::dense() const {
  // @@protoc_insertion_point(field_list:openmit.pb.Features.dense)
  return dense_;
}

// -------------------------------------------------------------------

// Instance

// uint64 inst_id = 1;
inline void Instance::clear_inst_id() {
  inst_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Instance::inst_id() const {
  // @@protoc_insertion_point(field_get:openmit.pb.Instance.inst_id)
  return inst_id_;
}
inline void Instance::set_inst_id(::google::protobuf::uint64 value) {
  
  inst_id_ = value;
  // @@protoc_insertion_point(field_set:openmit.pb.Instance.inst_id)
}

// float inst_weight = 2;
inline void Instance::clear_inst_weight() {
  inst_weight_ = 0;
}
inline float Instance::inst_weight() const {
  // @@protoc_insertion_point(field_get:openmit.pb.Instance.inst_weight)
  return inst_weight_;
}
inline void Instance::set_inst_weight(float value) {
  
  inst_weight_ = value;
  // @@protoc_insertion_point(field_set:openmit.pb.Instance.inst_weight)
}

// .openmit.pb.Label label = 3;
inline bool Instance::has_label() const {
  return this != internal_default_instance() && label_ != NULL;
}
inline void Instance::clear_label() {
  if (GetArenaNoVirtual() == NULL && label_ != NULL) {
    delete label_;
  }
  label_ = NULL;
}
inline const ::openmit::pb::Label& Instance::label() const {
  const ::openmit::pb::Label* p = label_;
  // @@protoc_insertion_point(field_get:openmit.pb.Instance.label)
  return p != NULL ? *p : *reinterpret_cast<const ::openmit::pb::Label*>(
      &::openmit::pb::_Label_default_instance_);
}
inline ::openmit::pb::Label* Instance::release_label() {
  // @@protoc_insertion_point(field_release:openmit.pb.Instance.label)
  
  ::openmit::pb::Label* temp = label_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  label_ = NULL;
  return temp;
}
inline ::openmit::pb::Label* Instance::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_unsafe_arena_release:openmit.pb.Instance.label)
  
  ::openmit::pb::Label* temp = label_;
  label_ = NULL;
  return temp;
}
inline ::openmit::pb::Label* Instance::mutable_label() {
  
  if (label_ == NULL) {
    _slow_mutable_label();
  }
  // @@protoc_insertion_point(field_mutable:openmit.pb.Instance.label)
  return label_;
}
inline void Instance::set_allocated_label(::openmit::pb::Label* label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete label_;
  }
  if (label) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(label);
    if (message_arena != submessage_arena) {
      label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:openmit.pb.Instance.label)
}

// .openmit.pb.Features features = 4;
inline bool Instance::has_features() const {
  return this != internal_default_instance() && features_ != NULL;
}
inline void Instance::clear_features() {
  if (GetArenaNoVirtual() == NULL && features_ != NULL) {
    delete features_;
  }
  features_ = NULL;
}
inline const ::openmit::pb::Features& Instance::features() const {
  const ::openmit::pb::Features* p = features_;
  // @@protoc_insertion_point(field_get:openmit.pb.Instance.features)
  return p != NULL ? *p : *reinterpret_cast<const ::openmit::pb::Features*>(
      &::openmit::pb::_Features_default_instance_);
}
inline ::openmit::pb::Features* Instance::release_features() {
  // @@protoc_insertion_point(field_release:openmit.pb.Instance.features)
  
  ::openmit::pb::Features* temp = features_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  features_ = NULL;
  return temp;
}
inline ::openmit::pb::Features* Instance::unsafe_arena_release_features() {
  // @@protoc_insertion_point(field_unsafe_arena_release:openmit.pb.Instance.features)
  
  ::openmit::pb::Features* temp = features_;
  features_ = NULL;
  return temp;
}
inline ::openmit::pb::Features* Instance::mutable_features() {
  
  if (features_ == NULL) {
    _slow_mutable_features();
  }
  // @@protoc_insertion_point(field_mutable:openmit.pb.Instance.features)
  return features_;
}
inline void Instance::set_allocated_features(::openmit::pb::Features* features) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete features_;
  }
  if (features) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(features);
    if (message_arena != submessage_arena) {
      features = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, features, submessage_arena);
    }
    
  } else {
    
  }
  features_ = features;
  // @@protoc_insertion_point(field_set_allocated:openmit.pb.Instance.features)
}

// uint32 seq_id = 5;
inline void Instance::clear_seq_id() {
  seq_id_ = 0u;
}
inline ::google::protobuf::uint32 Instance::seq_id() const {
  // @@protoc_insertion_point(field_get:openmit.pb.Instance.seq_id)
  return seq_id_;
}
inline void Instance::set_seq_id(::google::protobuf::uint32 value) {
  
  seq_id_ = value;
  // @@protoc_insertion_point(field_set:openmit.pb.Instance.seq_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Instances

// repeated .openmit.pb.Instance instances = 1;
inline int Instances::instances_size() const {
  return instances_.size();
}
inline void Instances::clear_instances() {
  instances_.Clear();
}
inline const ::openmit::pb::Instance& Instances::instances(int index) const {
  // @@protoc_insertion_point(field_get:openmit.pb.Instances.instances)
  return instances_.Get(index);
}
inline ::openmit::pb::Instance* Instances::mutable_instances(int index) {
  // @@protoc_insertion_point(field_mutable:openmit.pb.Instances.instances)
  return instances_.Mutable(index);
}
inline ::openmit::pb::Instance* Instances::add_instances() {
  // @@protoc_insertion_point(field_add:openmit.pb.Instances.instances)
  return instances_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::openmit::pb::Instance >*
Instances::mutable_instances() {
  // @@protoc_insertion_point(field_mutable_list:openmit.pb.Instances.instances)
  return &instances_;
}
inline const ::google::protobuf::RepeatedPtrField< ::openmit::pb::Instance >&
Instances::instances() const {
  // @@protoc_insertion_point(field_list:openmit.pb.Instances.instances)
  return instances_;
}

// uint64 logid = 2;
inline void Instances::clear_logid() {
  logid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Instances::logid() const {
  // @@protoc_insertion_point(field_get:openmit.pb.Instances.logid)
  return logid_;
}
inline void Instances::set_logid(::google::protobuf::uint64 value) {
  
  logid_ = value;
  // @@protoc_insertion_point(field_set:openmit.pb.Instances.logid)
}

// map<string, string> meta_info = 3;
inline int Instances::meta_info_size() const {
  return meta_info_.size();
}
inline void Instances::clear_meta_info() {
  meta_info_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Instances::meta_info() const {
  // @@protoc_insertion_point(field_map:openmit.pb.Instances.meta_info)
  return meta_info_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Instances::mutable_meta_info() {
  // @@protoc_insertion_point(field_mutable_map:openmit.pb.Instances.meta_info)
  return meta_info_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb
}  // namespace openmit

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_instance_2eproto__INCLUDED
